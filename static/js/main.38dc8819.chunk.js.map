{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","idx","quote","author","componentDidMount","fetch","then","res","json","result","tempIdx","Math","floor","random","quotes","length","_this","setState","isLoaded","error","getQuote","_this$state","_this$state2","this","react_default","a","createElement","id","className","style","minHeight","fontFamily","fontSize","onClick","href","concat","rel","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMA2GeA,6MAxGbC,MAAQ,CACNC,KAAM,GACNC,IAAK,EACLC,MAAO,GACPC,OAAQ,MAGVC,kBAAoB,WAClBC,MACE,0IAECC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAAAG,GACE,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,OAAOC,QACvDC,EAAKC,SAAS,CACZC,UAAU,EACVlB,KAAMS,EAAOK,OACbX,OAAQM,EAAOK,OAAOJ,GAASP,OAC/BD,MAAOO,EAAOK,OAAOJ,GAASR,SAGlC,SAAAiB,GACEH,EAAKC,SAAS,CACZC,UAAU,EACVC,eAMVC,SAAW,WAAM,IAAAC,EACKL,EAAKjB,MAAnBC,EADSqB,EACTrB,KAAMC,EADGoB,EACHpB,IACZe,EAAKC,SAAS,CACZhB,IAAKU,KAAKC,MAAMD,KAAKE,SAAWb,EAAKe,QACrCb,MAAOF,EAAKC,GAAKC,MACjBC,OAAQH,EAAKC,GAAKE,kFAIb,IAAAmB,EACiBC,KAAKxB,MAAvBG,EADCoB,EACDpB,MAAOC,EADNmB,EACMnB,OAEb,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,UAAU,aAC5BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eAAd,oBAEFJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAAYC,MAAO,CAAEC,UAAW,MAC7CN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,KACEC,GAAG,OACHC,UAAU,cACVC,MAAO,CAAEE,WAAY,sBAAuBC,SAAU,KAEtDR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,qBAAsB,IAAK1B,EAAO,IAC/CsB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,wBAGjBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAEjBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,KAAGC,GAAG,SAASC,UAAU,aAAzB,KACKzB,EADL,SAMNqB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,UACEO,QAASV,KAAKH,SACdO,GAAG,YACHC,UAAU,wBAHZ,aAOAJ,EAAAC,EAAAC,cAAA,KACEQ,KAAI,0CAAAC,OAA4CjC,EAA5C,aAAAiC,OAA6DhC,EAA7D,oDACJiC,IAAI,sBACJC,OAAO,SACPV,GAAG,cACHC,UAAU,mBALZ,2BArFEU,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.38dc8819.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  state = {\n    data: [],\n    idx: 0,\n    quote: \"\",\n    author: \"\"\n  };\n\n  componentDidMount = () => {\n    fetch(\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n    )\n      .then(res => res.json())\n      .then(\n        result => {\n          let tempIdx = Math.floor(Math.random() * result.quotes.length);\n          this.setState({\n            isLoaded: true,\n            data: result.quotes,\n            author: result.quotes[tempIdx].author,\n            quote: result.quotes[tempIdx].quote\n          });\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n\n  getQuote = () => {\n    let { data, idx } = this.state;\n    this.setState({\n      idx: Math.floor(Math.random() * data.length),\n      quote: data[idx].quote,\n      author: data[idx].author\n    });\n  };\n\n  render() {\n    let { quote, author } = this.state;\n\n    return (\n      <div id=\"quote-box\" className=\"container\">\n        <div className=\"card bg-light\">\n          <div className=\"card-header\">\n            <h1 className=\"text-center\">Quote Generator</h1>\n          </div>\n          <div className=\"card-body\" style={{ minHeight: 300 }}>\n            <div className=\"row\">\n              <div className=\"col-sm-2\" />\n              <div className=\"col-sm-8\">\n                <p\n                  id=\"text\"\n                  className=\"text-center\"\n                  style={{ fontFamily: \"'Pacifico', cursive\", fontSize: 24 }}\n                >\n                  <i className=\"fa fa-quote-left\" />{\" \"}{quote}{\" \"}\n                  <i className=\"fa fa-quote-right\" />\n                </p>\n              </div>\n              <div className=\"col-sm-2\" />\n            </div>\n            <div className=\"row\">\n              <div className=\"col-sm-8\" />\n              <div className=\"col-sm-4\">\n                <p id=\"author\" className=\"text-left\">\n                  - {author} -\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-footer\">\n            <div className=\"row\">\n              <div className=\"col-sm-9\" />\n              <div className=\"col-sm-3\">\n                <button\n                  onClick={this.getQuote}\n                  id=\"new-quote\"\n                  className=\"btn btn-success mr-2\"\n                >\n                  new quote\n                </button>\n                <a\n                  href={`https://twitter.com/intent/tweet?text=\"${quote}\"%20by%20${author}&url=https://gitsushi.github.io/quote-generator/`}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  id=\"tweet-quote\"\n                  className=\"btn btn-primary\"\n                >\n                  tweet quote\n                </a>\n              </div>\n            </div>\n\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}